#include <iostream>
#include <vector>
using namespace std;

//                          1
template <typename T> 
    class smartPointer {
        T *id;
        public:
            smartPointer(T *id){
                this->id=id;
                cout << "Witam " + id << endl;
            }
            
            ~smartPointer(){
                cout << "Dowidzenia " + id << endl;
                delete id;
            }
            
            T &operator *(){
                return *id;
            }
            
            T *operator -> (){
                return id;
            }
    };
            
            
//                          2
class Triangle{
        float a, b, c;
public: 
    Triangle (float a, float b, float c){
        this->a=a;
        this->b=b;
        this->c=c;
    }
    void obw(unique_ptr<Triangle> &ptr){
        cout << "obw: " << ptr->a + ptr->b + ptr->c  << endl;
    }
};

//                          3
class WordBag{
    private:
        vector<unique_ptr<string>> str;
        int size;
    public:
        WordBag(){
            size = 0;
        }
        
        void add(unique_ptr<string> &ptr){
            str.push_back(move(ptr));
            size++;
        }
};

int main()
{
    cout << "Hello World!" << endl;
    unique_ptr<Triangle> T1(new Triangle(10.1, 20.2, 30.3));
    unique_ptr<Triangle> T2(new Triangle(1.1, 2.2, 3.3));
    T1->obw(T2);
   // string napis = "napis";
   // cout << napis << endl;
    return 0;
}
